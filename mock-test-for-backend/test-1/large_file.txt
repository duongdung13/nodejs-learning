const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});const http = require('http');
const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const PORT = 3000;
const SOURCE_FILE = path.join(__dirname, 'largefile.txt'); // File lớn cần nén
const COMPRESSED_FILE = path.join(__dirname, 'largefile.txt.gz'); // File nén lưu ra

const server = http.createServer((req, res) => {
  if (req.url === '/compress' && req.method === 'GET') {
    // Kiểm tra file nguồn có tồn tại không
    fs.access(SOURCE_FILE, fs.constants.F_OK | fs.constants.R_OK, (err) => {
      if (err) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        return res.end('Source file not found or unreadable');
      }

      // Tạo các stream: đọc -> nén -> ghi
      const readStream = fs.createReadStream(SOURCE_FILE);
      const gzipStream = zlib.createGzip();
      const writeStream = fs.createWriteStream(COMPRESSED_FILE);

      // Xử lý lỗi trong từng stream
      readStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error reading source file');
      });

      gzipStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Compression error');
      });

      writeStream.on('error', (err) => {
        res.writeHead(500);
        res.end('Error writing compressed file');
      });

      writeStream.on('finish', () => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('File compressed successfully');
      });

      // Pipe stream: Đọc -> Nén -> Ghi
      readStream.pipe(gzipStream).pipe(writeStream);
    });
  } else {